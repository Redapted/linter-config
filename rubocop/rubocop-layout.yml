###################################################
# https://docs.rubocop.org/rubocop/cops_layout.html

# Autocorrect: yes
# Safe: yes
Layout/AccessModifierIndentation:
  Description: Check indentation of private/protected visibility modifiers.
  StyleGuide: '#indent-public-private-protected'
  Enabled: true
  VersionAdded: '0.49'
  EnforcedStyle: indent
  SupportedStyles:
    - outdent
    - indent
  # By default, the indentation width from Layout/IndentationWidth is used
  # But it can be overridden by setting this parameter
  IndentationWidth: ~

# Autocorrect: yes
# Safe: yes
Layout/ArgumentAlignment:
  Description: >-
                 Align the arguments of a method call if they span more
                 than one line.
  StyleGuide: '#no-double-indent'
  Enabled: true
  VersionAdded: '0.68'
  VersionChanged: '0.77'
  # Alignment of arguments in multi-line method calls.
  #
  # The `with_first_argument` style aligns the following lines along the same
  # column as the first parameter.
  #
  #     method_call(a,
  #                 b)
  #
  # The `with_fixed_indentation` style aligns the following lines with one
  # level of indentation relative to the start of the line with the method call.
  #
  #     method_call(a,
  #       b)
  EnforcedStyle: with_first_argument
  SupportedStyles:
    - with_first_argument
    - with_fixed_indentation
  # By default, the indentation width from Layout/IndentationWidth is used
  # But it can be overridden by setting this parameter
  IndentationWidth: ~

# Autocorrect: yes
# Safe: yes
Layout/ArrayAlignment:
  Description: >-
                 Align the elements of an array literal if they span more than
                 one line.
  StyleGuide: '#no-double-indent'
  Enabled: true
  VersionAdded: '0.49'
  VersionChanged: '0.77'
  # Alignment of elements of a multi-line array.
  #
  # The `with_first_parameter` style aligns the following lines along the same
  # column as the first element.
  #
  #     array = [1, 2, 3,
  #              4, 5, 6]
  #
  # The `with_fixed_indentation` style aligns the following lines with one
  # level of indentation relative to the start of the line with start of array.
  #
  #     array = [1, 2, 3,
  #       4, 5, 6]
  EnforcedStyle: with_first_element
  SupportedStyles:
    - with_first_element
    - with_fixed_indentation
  # By default, the indentation width from Layout/IndentationWidth is used
  # But it can be overridden by setting this parameter
  IndentationWidth: ~

# Autocorrect: yes
# Safe: yes
Layout/AssignmentIndentation:
  Description: >-
                Checks the indentation of the first line of the
                right-hand-side of a multi-line assignment.
  Enabled: true
  VersionAdded: '0.49'
  VersionChanged: '0.77'
  # By default, the indentation width from `Layout/IndentationWidth` is used
  # But it can be overridden by setting this parameter
  IndentationWidth: ~

# Autocorrect: yes
# Safe: yes
Layout/BlockAlignment:
  Description: 'Align block ends correctly.'
  Enabled: true
  VersionAdded: '0.53'
  # The value `start_of_block` means that the `end` should be aligned with line
  # where the `do` keyword appears.
  # The value `start_of_line` means it should be aligned with the whole
  # expression's starting line.
  # The value `either` means both are allowed.
  EnforcedStyleAlignWith: either
  SupportedStylesAlignWith:
    - either
    - start_of_block
    - start_of_line

# Autocorrect: yes
# Safe: yes
Layout/BlockEndNewline:
  Description: 'Put end statement of multiline block on its own line.'
  Enabled: true
  VersionAdded: '0.49'

# Autocorrect: yes
# Safe: yes
Layout/CaseIndentation:
  Description: 'Indentation of when in a case/when/[else/]end.'
  StyleGuide: '#indent-when-to-case'
  Enabled: true
  VersionAdded: '0.49'
  EnforcedStyle: case
  SupportedStyles:
    - case
    - end
  IndentOneStep: false
  # By default, the indentation width from `Layout/IndentationWidth` is used.
  # But it can be overridden by setting this parameter.
  # This only matters if `IndentOneStep` is `true`
  IndentationWidth: ~

# Autocorrect: yes
# Safe: yes
Layout/ClassStructure:
  Description: 'Enforces a configured order of definitions within a class body.'
  StyleGuide: '#consistent-classes'
  Enabled: true
  VersionAdded: '0.52'
  Categories:
    module_inclusion:
      - include
      - prepend
      - extend
  ExpectedOrder:
      - module_inclusion
      - constants
      - public_class_methods
      - initializer
      - public_methods
      - protected_methods
      - private_methods

# Autocorrect: yes
# Safe: yes
Layout/ClosingHeredocIndentation:
  Description: 'Checks the indentation of here document closings.'
  Enabled: true
  VersionAdded: '0.57'

# Autocorrect: yes
# Safe: yes
Layout/ClosingParenthesisIndentation:
  Description: 'Checks the indentation of hanging closing parentheses.'
  Enabled: true
  VersionAdded: '0.49'

# Autocorrect: yes
# Safe: yes
Layout/CommentIndentation:
  Description: 'Indentation of comments.'
  Enabled: true
  VersionAdded: '0.49'

# Autocorrect: yes
# Safe: yes
Layout/ConditionPosition:
  Description: >-
                 Checks for condition placed in a confusing position relative to
                 the keyword.
  StyleGuide: '#same-line-condition'
  Enabled: true
  VersionAdded: '0.53'
  VersionChanged: '0.83'

# Autocorrect: yes
# Safe: yes
Layout/DefEndAlignment:
  Description: 'Align ends corresponding to defs correctly.'
  Enabled: true
  VersionAdded: '0.53'
  # The value `def` means that `end` should be aligned with the def keyword.
  # The value `start_of_line` means that `end` should be aligned with method
  # calls like `private`, `public`, etc, if present in front of the `def`
  # keyword on the same line.
  EnforcedStyleAlignWith: start_of_line
  SupportedStylesAlignWith:
    - start_of_line
    - def
  Severity: warning
  AutoCorrect: true

# Autocorrect: yes
# Safe: yes
Layout/DotPosition:
  Description: 'Checks the position of the dot in multi-line method calls.'
  StyleGuide: '#consistent-multi-line-chains'
  Enabled: true
  VersionAdded: '0.49'
  EnforcedStyle: trailing
  SupportedStyles:
    - leading
    - trailing

# Autocorrect: yes
# Safe: yes
Layout/ElseAlignment:
  Description: 'Align elses and elsifs correctly.'
  Enabled: true
  VersionAdded: '0.49'

# Autocorrect: yes
# Safe: yes
Layout/EmptyComment:
  Description: 'Checks empty comment.'
  Enabled: true
  VersionAdded: '0.53'
  AllowBorderComment: true
  AllowMarginComment: true

# Autocorrect: yes
# Safe: yes
Layout/EmptyLineAfterGuardClause:
  Description: 'Add empty line after guard clause.'
  Enabled: true
  VersionAdded: '0.56'
  VersionChanged: '0.59'

# Autocorrect: yes
# Safe: yes
Layout/EmptyLineAfterMagicComment:
  Description: 'Add an empty line after magic comments to separate them from code.'
  StyleGuide: '#separate-magic-comments-from-code'
  Enabled: true
  VersionAdded: '0.49'

# Autocorrect: yes
# Safe: yes
Layout/EmptyLineAfterMultilineCondition:
  Description: 'Enforces empty line after multiline condition.'
  # This is disabled, because this style is not very common in practice.
  Enabled: false
  VersionAdded: '0.90'
  Reference:
    - https://github.com/airbnb/ruby#multiline-if-newline

# Autocorrect: yes
# Safe: yes
Layout/EmptyLineBetweenDefs:
  Description: 'Use empty lines between defs.'
  StyleGuide: '#empty-lines-between-methods'
  Enabled: true
  VersionAdded: '0.49'
  # If `true`, this parameter means that single line method definitions don't
  # need an empty line between them.
  AllowAdjacentOneLineDefs: true
  # Can be array to specify minimum and maximum number of empty lines, e.g. [1, 2]
  NumberOfEmptyLines: 1

# Autocorrect: yes
# Safe: yes
Layout/EmptyLines:
  Description: "Don't use several empty lines in a row."
  StyleGuide: '#two-or-more-empty-lines'
  Enabled: true
  VersionAdded: '0.49'

# Autocorrect: yes
# Safe: yes
Layout/EmptyLinesAroundAccessModifier:
  Description: "Keep blank lines around access modifiers."
  StyleGuide: '#empty-lines-around-access-modifier'
  Enabled: true
  VersionAdded: '0.49'
  EnforcedStyle: around
  SupportedStyles:
    - around
    - only_before
  Reference:
    # A reference to `EnforcedStyle: only_before`.
    - https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#follow-the-coding-conventions

# Autocorrect: yes
# Safe: yes
Layout/EmptyLinesAroundArguments:
  Description: "Keeps track of empty lines around method arguments."
  Enabled: true
  VersionAdded: '0.52'

# Autocorrect: yes
# Safe: yes
Layout/EmptyLinesAroundAttributeAccessor:
  Description: "Keep blank lines around attribute accessors."
  StyleGuide: '#empty-lines-around-attribute-accessor'
  Enabled: true
  VersionAdded: '0.83'
  VersionChanged: '0.84'
  AllowAliasSyntax: true
  AllowedMethods:
    - alias_method
    - public
    - protected
    - private

# Autocorrect: yes
# Safe: yes
Layout/EmptyLinesAroundBeginBody:
  Description: "Keeps track of empty lines around begin-end bodies."
  StyleGuide: '#empty-lines-around-bodies'
  Enabled: true
  VersionAdded: '0.49'

# Autocorrect: yes
# Safe: yes
Layout/EmptyLinesAroundBlockBody:
  Description: "Keeps track of empty lines around block bodies."
  StyleGuide: '#empty-lines-around-bodies'
  Enabled: true
  VersionAdded: '0.49'
  EnforcedStyle: no_empty_lines
  SupportedStyles:
    - empty_lines
    - no_empty_lines

# Autocorrect: yes
# Safe: yes
Layout/EmptyLinesAroundClassBody:
  Description: "Keeps track of empty lines around class bodies."
  StyleGuide: '#empty-lines-around-bodies'
  Enabled: true
  VersionAdded: '0.49'
  VersionChanged: '0.53'
  EnforcedStyle: no_empty_lines
  SupportedStyles:
    - empty_lines
    - empty_lines_except_namespace
    - empty_lines_special
    - no_empty_lines
    - beginning_only
    - ending_only

# Autocorrect: yes
# Safe: yes
Layout/EmptyLinesAroundExceptionHandlingKeywords:
  Description: "Keeps track of empty lines around exception handling keywords."
  StyleGuide: '#empty-lines-around-bodies'
  Enabled: true
  VersionAdded: '0.49'

# Autocorrect: yes
# Safe: yes
Layout/EmptyLinesAroundMethodBody:
  Description: "Keeps track of empty lines around method bodies."
  StyleGuide: '#empty-lines-around-bodies'
  Enabled: true
  VersionAdded: '0.49'

# Autocorrect: yes
# Safe: yes
Layout/EmptyLinesAroundModuleBody:
  Description: "Keeps track of empty lines around module bodies."
  StyleGuide: '#empty-lines-around-bodies'
  Enabled: true
  VersionAdded: '0.49'
  EnforcedStyle: no_empty_lines
  SupportedStyles:
    - empty_lines
    - empty_lines_except_namespace
    - empty_lines_special
    - no_empty_lines

# Autocorrect: yes
# Safe: yes
Layout/EndAlignment:
  Description: 'Align ends correctly.'
  Enabled: true
  VersionAdded: '0.53'
  # The value `keyword` means that `end` should be aligned with the matching
  # keyword (`if`, `while`, etc.).
  # The value `variable` means that in assignments, `end` should be aligned
  # with the start of the variable on the left hand side of `=`. In all other
  # situations, `end` should still be aligned with the keyword.
  # The value `start_of_line` means that `end` should be aligned with the start
  # of the line which the matching keyword appears on.
  EnforcedStyleAlignWith: keyword
  SupportedStylesAlignWith:
    - keyword
    - variable
    - start_of_line
  Severity: warning
  AutoCorrect: true

# Autocorrect: yes
# Safe: yes
Layout/EndOfLine:
  Description: 'Use Unix-style line endings.'
  StyleGuide: '#crlf'
  Enabled: true
  VersionAdded: '0.49'
  # The `native` style means that CR+LF (Carriage Return + Line Feed) is
  # enforced on Windows, and LF is enforced on other platforms. The other styles
  # mean LF and CR+LF, respectively.
  EnforcedStyle: lf
  SupportedStyles:
    - native
    - lf
    - crlf

# Autocorrect: yes
# Safe: yes
Layout/ExtraSpacing:
  Description: 'Do not use unnecessary spacing.'
  Enabled: true
  VersionAdded: '0.49'
  # When true, allows most uses of extra spacing if the intent is to align
  # things with the previous or next line, not counting empty lines or comment
  # lines.
  AllowForAlignment: true
  # When true, allows things like 'obj.meth(arg)  # comment',
  # rather than insisting on 'obj.meth(arg) # comment'.
  # If done for alignment, either this OR AllowForAlignment will allow it.
  AllowBeforeTrailingComments: false
  # When true, forces the alignment of `=` in assignments on consecutive lines.
  ForceEqualSignAlignment: false

# Autocorrect: yes
# Safe: yes
Layout/FirstArgumentIndentation:
  Description: 'Checks the indentation of the first argument in a method call.'
  Enabled: true
  VersionAdded: '0.68'
  VersionChanged: '0.77'
  EnforcedStyle: consistent
  SupportedStyles:
    # The first parameter should always be indented one step more than the
    # preceding line.
    - consistent
    # The first parameter should always be indented one level relative to the
    # parent that is receiving the parameter
    - consistent_relative_to_receiver
    # The first parameter should normally be indented one step more than the
    # preceding line, but if it's a parameter for a method call that is itself
    # a parameter in a method call, then the inner parameter should be indented
    # relative to the inner method.
    - special_for_inner_method_call
    # Same as `special_for_inner_method_call` except that the special rule only
    # applies if the outer method call encloses its arguments in parentheses.
    - special_for_inner_method_call_in_parentheses
  # By default, the indentation width from `Layout/IndentationWidth` is used
  # But it can be overridden by setting this parameter
  IndentationWidth: ~

# Autocorrect: yes
# Safe: yes
Layout/FirstArrayElementIndentation:
  Description: >-
                 Checks the indentation of the first element in an array
                 literal.
  Enabled: true
  VersionAdded: '0.68'
  VersionChanged: '0.77'
  # The value `special_inside_parentheses` means that array literals with
  # brackets that have their opening bracket on the same line as a surrounding
  # opening round parenthesis, shall have their first element indented relative
  # to the first position inside the parenthesis.
  #
  # The value `consistent` means that the indentation of the first element shall
  # always be relative to the first position of the line where the opening
  # bracket is.
  #
  # The value `align_brackets` means that the indentation of the first element
  # shall always be relative to the position of the opening bracket.
  EnforcedStyle: consistent
  SupportedStyles:
    - special_inside_parentheses
    - consistent
    - align_brackets
  # By default, the indentation width from `Layout/IndentationWidth` is used
  # But it can be overridden by setting this parameter
  IndentationWidth: ~

# Autocorrect: yes
# Safe: yes
Layout/FirstArrayElementLineBreak:
  Description: >-
                 Checks for a line break before the first element in a
                 multi-line array.
  Enabled: true
  VersionAdded: '0.49'

# Autocorrect: yes
# Safe: yes
Layout/FirstHashElementIndentation:
  Description: 'Checks the indentation of the first key in a hash literal.'
  Enabled: true
  VersionAdded: '0.68'
  VersionChanged: '0.77'
  # The value `special_inside_parentheses` means that hash literals with braces
  # that have their opening brace on the same line as a surrounding opening
  # round parenthesis, shall have their first key indented relative to the
  # first position inside the parenthesis.
  #
  # The value `consistent` means that the indentation of the first key shall
  # always be relative to the first position of the line where the opening
  # brace is.
  #
  # The value `align_braces` means that the indentation of the first key shall
  # always be relative to the position of the opening brace.
  EnforcedStyle: consistent
  SupportedStyles:
    - special_inside_parentheses
    - consistent
    - align_braces
  # By default, the indentation width from `Layout/IndentationWidth` is used
  # But it can be overridden by setting this parameter
  IndentationWidth: ~

# Autocorrect: yes
# Safe: yes
Layout/FirstHashElementLineBreak:
  Description: >-
                 Checks for a line break before the first element in a
                 multi-line hash.
  Enabled: true
  VersionAdded: '0.49'

# Autocorrect: yes
# Safe: yes
Layout/FirstMethodArgumentLineBreak:
  Description: >-
                 Checks for a line break before the first argument in a
                 multi-line method call.
  Enabled: true
  VersionAdded: '0.49'

# Autocorrect: yes
# Safe: yes
Layout/FirstMethodParameterLineBreak:
  Description: >-
                 Checks for a line break before the first parameter in a
                 multi-line method parameter definition.
  Enabled: true
  VersionAdded: '0.49'

# Autocorrect: yes
# Safe: yes
Layout/FirstParameterIndentation:
  Description: >-
                 Checks the indentation of the first parameter in a
                 method definition.
  Enabled: true
  VersionAdded: '0.49'
  VersionChanged: '0.77'
  EnforcedStyle: consistent
  SupportedStyles:
    - consistent
    - align_parentheses
  # By default, the indentation width from `Layout/IndentationWidth` is used
  # But it can be overridden by setting this parameter
  IndentationWidth: ~

# Autocorrect: yes
# Safe: yes
Layout/HashAlignment:
  Description: >-
    Align the elements of a hash literal if they span more than
    one line.
  Enabled: true
  AllowMultipleStyles: true
  VersionAdded: '0.49'
  VersionChanged: '0.77'
  # Alignment of entries using hash rocket as separator. Valid values are:
  #
  # key - left alignment of keys
  #   'a' => 2
  #   'bb' => 3
  # separator - alignment of hash rockets, keys are right aligned
  #    'a' => 2
  #   'bb' => 3
  # table - left alignment of keys, hash rockets, and values
  #   'a'  => 2
  #   'bb' => 3
  EnforcedHashRocketStyle: key
  SupportedHashRocketStyles:
    - key
    - separator
    - table
  # Alignment of entries using colon as separator. Valid values are:
  #
  # key - left alignment of keys
  #   a: 0
  #   bb: 1
  # separator - alignment of colons, keys are right aligned
  #    a: 0
  #   bb: 1
  # table - left alignment of keys and values
  #   a:  0
  #   bb: 1
  EnforcedColonStyle: key
  SupportedColonStyles:
    - key
    - separator
    - table
  # Select whether hashes that are the last argument in a method call should be
  # inspected? Valid values are:
  #
  # always_inspect - Inspect both implicit and explicit hashes.
  #   Registers an offense for:
  #     function(a: 1,
  #       b: 2)
  #   Registers an offense for:
  #     function({a: 1,
  #       b: 2})
  # always_ignore - Ignore both implicit and explicit hashes.
  #   Accepts:
  #     function(a: 1,
  #       b: 2)
  #   Accepts:
  #     function({a: 1,
  #       b: 2})
  # ignore_implicit - Ignore only implicit hashes.
  #   Accepts:
  #     function(a: 1,
  #       b: 2)
  #   Registers an offense for:
  #     function({a: 1,
  #       b: 2})
  # ignore_explicit - Ignore only explicit hashes.
  #   Accepts:
  #     function({a: 1,
  #       b: 2})
  #   Registers an offense for:
  #     function(a: 1,
  #       b: 2)
  EnforcedLastArgumentHashStyle: always_inspect
  SupportedLastArgumentHashStyles:
    - always_inspect
    - always_ignore
    - ignore_implicit
    - ignore_explicit

# Autocorrect: yes
# Safe: yes
Layout/HeredocArgumentClosingParenthesis:
  Description: >-
                 Checks for the placement of the closing parenthesis in a
                 method call that passes a HEREDOC string as an argument.
  Enabled: false
  StyleGuide: '#heredoc-argument-closing-parentheses'
  VersionAdded: '0.68'

# Supports --auto-correct
Layout/ParameterAlignment:
  Description: Align the parameters of a method call if they span more than one line.
  StyleGuide: https://github.com/rubocop-hq/ruby-style-guide#no-double-indent
  Enabled: true
  EnforcedStyle: with_first_parameter
  SupportedStyles:
  - with_first_parameter
  - with_fixed_indentation

Layout/HeredocIndentation:
  Enabled: true

# Supports --auto-correct
Layout/IndentationConsistency:
  Description: Keep indentation straight.
  Enabled: true
  EnforcedStyle: normal
  SupportedStyles:
  - normal
  - indented_internal_methods

# Supports --auto-correct
Layout/IndentationStyle:
  Description: No hard tabs.
  StyleGuide: https://github.com/rubocop-hq/ruby-style-guide#spaces-indentation
  Enabled: true

# Supports --auto-correct
Layout/IndentationWidth:
  Description: Use 2 spaces for indentation.
  StyleGuide: https://github.com/rubocop-hq/ruby-style-guide#spaces-indentation
  Enabled: true
  Width: 2

# Supports --auto-correct
Layout/InitialIndentation:
  Description: Checks the indentation of the first non-blank non-comment line in a file.
  Enabled: true

Layout/LeadingEmptyLines:
  Enabled: true

# Supports --auto-correct
Layout/LeadingCommentSpace:
  Description: Comments should start with a space.
  StyleGuide: https://github.com/rubocop-hq/ruby-style-guide#hash-space
  Enabled: true

# Supports --auto-correct
Layout/MultilineArrayBraceLayout:
  Description: Checks that the closing brace in an array literal is symmetrical with
    respect to the opening brace and the array elements.
  Enabled: true

# Supports --auto-correct
Layout/MultilineAssignmentLayout:
  Description: Check for a newline after the assignment operator in multi-line assignments.
  StyleGuide: https://github.com/rubocop-hq/ruby-style-guide#indent-conditional-assignment
  Enabled: false
  SupportedTypes:
  - block
  - case
  - class
  - if
  - kwbegin
  - module
  EnforcedStyle: new_line
  SupportedStyles:
  - same_line
  - new_line

# Supports --auto-correct
Layout/MultilineBlockLayout:
  Description: Ensures newlines after multiline block do statements.
  Enabled: true

Layout/MultilineHashBraceLayout:
  Description: >-
                 Checks that the closing brace in a hash literal is
                 symmetrical with respect to the opening brace and the
                 hash elements.
  Enabled: true

Layout/MultilineMethodCallBraceLayout:
  Description: >-
                 Checks that the closing brace in a method call is
                 symmetrical with respect to the opening brace and the
                 method arguments.
  Enabled: true
  EnforcedStyle: symmetrical

# Supports --auto-correct
Layout/MultilineMethodCallIndentation:
  Description: Checks indentation of method calls with the dot operator that span more
    than one line.
  Enabled: true
  EnforcedStyle: indented
  SupportedStyles:
  - aligned
  - indented

Layout/MultilineMethodDefinitionBraceLayout:
  Description: >-
                 Checks that the closing brace in a method definition is
                 symmetrical with respect to the opening brace and the
                 method parametters.
  Enabled: true

# The default (aligned) would force multi line operations to look like this
# balance = Balance.
#           where(cond).
#           where(cond).
#           first
Layout/MultilineOperationIndentation:
  Enabled: true
  EnforcedStyle: indented

# Supports --auto-correct
Layout/RescueEnsureAlignment:
  Description: Align rescues and ensures correctly.
  Enabled: true

# Supports --auto-correct
Layout/SpaceAfterColon:
  Description: Use spaces after colons.
  StyleGuide: https://github.com/rubocop-hq/ruby-style-guide#spaces-operators
  Enabled: true

# Supports --auto-correct
Layout/SpaceAfterComma:
  Description: Use spaces after commas.
  StyleGuide: https://github.com/rubocop-hq/ruby-style-guide#spaces-operators
  Enabled: true

# Supports --auto-correct
Layout/SpaceAfterMethodName:
  Description: Do not put a space between a method name and the opening parenthesis
    in a method definition.
  StyleGuide: https://github.com/rubocop-hq/ruby-style-guide#parens-no-spaces
  Enabled: true

# Supports --auto-correct
Layout/SpaceAfterNot:
  Description: Tracks redundant space after the ! operator.
  StyleGuide: https://github.com/rubocop-hq/ruby-style-guide#no-space-bang
  Enabled: true

# Supports --auto-correct
Layout/SpaceAfterSemicolon:
  Description: Use spaces after semicolons.
  StyleGuide: https://github.com/rubocop-hq/ruby-style-guide#spaces-operators
  Enabled: true

# Supports --auto-correct
Layout/SpaceAroundBlockParameters:
  Description: Checks the spacing inside and after block parameters pipes.
  Enabled: true
  EnforcedStyleInsidePipes: no_space

# Supports --auto-correct
Layout/SpaceAroundEqualsInParameterDefault:
  Description: Checks that the equals signs in parameter default assignments have or
    don't have surrounding space depending on configuration.
  StyleGuide: https://github.com/rubocop-hq/ruby-style-guide#spaces-around-equals
  Enabled: true
  EnforcedStyle: space
  SupportedStyles:
  - space
  - no_space

Layout/SpaceAroundKeyword:
  Description: 'Use a space around keywords if appropriate.'
  Enabled: true

Layout/SpaceAroundMethodCallOperator:
  Description: 'Checks method call operators to not have spaces around them.'
  Enabled: true

# Supports --auto-correct
Layout/SpaceAroundOperators:
  Description: Use a single space around operators.
  StyleGuide: https://github.com/rubocop-hq/ruby-style-guide#spaces-operators
  Enabled: true
  AllowForAlignment: true

# Supports --auto-correct
Layout/SpaceBeforeBlockBraces:
  Description: Checks that the left block brace has or doesn't have space before it.
  Enabled: true
  EnforcedStyle: space
  SupportedStyles:
  - space
  - no_space

# Supports --auto-correct
Layout/SpaceBeforeComma:
  Description: No spaces before commas.
  Enabled: true

# Supports --auto-correct
Layout/SpaceBeforeComment:
  Description: Checks for missing space between code and a comment on the same line.
  Enabled: true

# Supports --auto-correct
Layout/SpaceBeforeFirstArg:
  Description: Put a space between a method name and the first argument in a method
    call without parentheses.
  Enabled: true

# Supports --auto-correct
Layout/SpaceBeforeSemicolon:
  Description: No spaces before semicolons.
  Enabled: true

Layout/SpaceInLambdaLiteral:
  Enabled: true

Layout/SpaceInsideArrayPercentLiteral:
  Enabled: true

# Supports --auto-correct
Layout/SpaceInsideBlockBraces:
  Description: Checks that block braces have or don't have surrounding space. For blocks
    taking parameters, checks that the left brace has or doesn't have trailing space.
  Enabled: true
  EnforcedStyle: space
  SupportedStyles:
  - space
  - no_space
  EnforcedStyleForEmptyBraces: no_space
  SpaceBeforeBlockParameters: true

Layout/SpaceInsideArrayLiteralBrackets:
  EnforcedStyle: no_space
  SupportedStyles:
    - space
    - no_space
    # 'compact' normally requires a space inside the brackets, with the exception
    # that successive left brackets or right brackets are collapsed together
    - compact
  EnforcedStyleForEmptyBrackets: no_space
  SupportedStylesForEmptyBrackets:
    - space
    - no_space
  Enabled: true

Layout/SpaceInsideReferenceBrackets:
  EnforcedStyleForEmptyBrackets: no_space
  SupportedStyles:
    - space
    - no_space
  Enabled: true

# Supports --auto-correct
Layout/SpaceInsideHashLiteralBraces:
  Description: Use spaces inside hash literal braces - or don't.
  StyleGuide: https://github.com/rubocop-hq/ruby-style-guide#spaces-operators
  Enabled: true
  EnforcedStyle: space
  EnforcedStyleForEmptyBraces: no_space
  SupportedStyles:
  - space
  - no_space

# Supports --auto-correct
Layout/SpaceInsideParens:
  Description: No spaces after ( or before ).
  StyleGuide: https://github.com/rubocop-hq/ruby-style-guide#no-spaces-braces
  Enabled: true

Layout/SpaceInsidePercentLiteralDelimiters:
  Description: 'No unnecessary spaces inside delimiters of %i/%w/%x literals.'
  Enabled: true

# Supports --auto-correct
Layout/SpaceInsideRangeLiteral:
  Description: No spaces inside range literals.
  StyleGuide: https://github.com/rubocop-hq/ruby-style-guide#no-space-inside-range-literals
  Enabled: true

# Supports --auto-correct
Layout/SpaceInsideStringInterpolation:
  Description: Checks for padding/surrounding spaces inside string interpolation.
  StyleGuide: https://github.com/rubocop-hq/ruby-style-guide#string-interpolation
  Enabled: true
  EnforcedStyle: no_space
  SupportedStyles:
  - space
  - no_space

# Supports --auto-correct
Layout/TrailingEmptyLines:
  Description: Checks trailing blank lines and final newline.
  StyleGuide: https://github.com/rubocop-hq/ruby-style-guide#newline-eof
  Enabled: true
  EnforcedStyle: final_newline
  SupportedStyles:
  - final_newline
  - final_blank_line

# Supports --auto-correct
Layout/TrailingWhitespace:
  Description: Avoid trailing whitespace.
  StyleGuide: https://github.com/rubocop-hq/ruby-style-guide#no-trailing-whitespace
  Enabled: true

# Supports --auto-correct
Layout/LineLength:
  Max: 100
  AllowURI: true
